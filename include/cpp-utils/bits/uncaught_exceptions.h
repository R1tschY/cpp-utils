// Copyright (c) 2012, Evgeny Panasyuk

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef CPP_UTILS_BITS_UNCAUGHT_EXCEPTIONS_H_
#define CPP_UTILS_BITS_UNCAUGHT_EXCEPTIONS_H_

#include "../compiler/compiler.h"

// impl decision
// Credits to https://github.com/facebook/folly

#if (defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411) || defined(__DOXYGEN__)
# define CPP_UNCAUGHT_EXCEPTIONS_STD

#elif CPP_GCC_COMPATIBLE
# define CPP_UNCAUGHT_EXCEPTIONS_CXA_GET_GLOBALS

#elif defined(CPP_MSC) && CPP_MSC_VERSION_CHECK(1900) // MSVC++ 2015 or greater
# define CPP_UNCAUGHT_EXCEPTIONS_STD

#elif defined(CPP_MSC) && CPP_MSC_VERSION_CHECK(1400) // MSVC++ 8.0 or greater
# define CPP_UNCAUGHT_EXCEPTIONS_GETPTD

#endif

// impl
// Based on Evgeny Panasyuk's implementation

#if defined(CPP_UNCAUGHT_EXCEPTIONS_STD)
#undef CPP_UNCAUGHT_EXCEPTIONS_STD

#include <exception>

namespace cpp {
inline unsigned uncaught_exceptions()
{
  return unsigned(std::uncaught_exceptions());
}
} // namespace cpp

#elif defined(CPP_UNCAUGHT_EXCEPTIONS_CXA_GET_GLOBALS)
#undef CPP_UNCAUGHT_EXCEPTIONS_CXA_GET_GLOBALS

# include <cxxabi.h>
# include "access_field.h"

namespace cpp {

inline unsigned uncaught_exceptions()
{
  return access_field<unsigned>(abi::__cxa_get_globals(), sizeof(void*));
}
} // namespace cpp

#elif defined(CPP_UNCAUGHT_EXCEPTIONS_GETPTD)
#undef CPP_UNCAUGHT_EXCEPTIONS_GETPTD

# include "access_field.h"

struct _tiddata;
extern "C" _tiddata* _getptd();

namespace cpp {
inline int uncaught_exceptions()
{
    // MSVC specific. Tested on {MSVC2005SP1,MSVC2008SP1,MSVC2010SP1,MSVC2012}x{x32,x64}.
    return access_field<unsigned>(_getptd(), 28 * sizeof(void*) + 32);
}
} // namespace details

#else

#error "no uncaught_exceptions implementation for compiler"

#endif

#endif /* CPP_UTILS_BITS_UNCAUGHT_EXCEPTIONS_H_ */
